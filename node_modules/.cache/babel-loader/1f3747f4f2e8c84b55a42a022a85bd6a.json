{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nconst util_1 = __importDefault(require(\"util\"));\n\nfunction indent(str) {\n  return str.split('\\n').map(s => s ? `  ${s}` : '').join('\\n');\n}\n\nfunction json(data) {\n  return JSON.stringify(data, null, 2);\n}\n\nclass AxiosError extends Error {\n  constructor(messageOrError, error) {\n    let err;\n\n    if (typeof messageOrError === 'string') {\n      super(messageOrError);\n      err = error;\n    } else {\n      super(messageOrError.message);\n      err = messageOrError;\n    }\n\n    const {\n      config,\n      request,\n      response\n    } = err;\n    this.config = config;\n    this.request = request;\n    this.response = response;\n\n    if (response && response.status) {\n      this.status = response.status;\n    }\n\n    this.name = 'AxiosError';\n  }\n\n  [util_1.default.inspect.custom]() {\n    let requestMessage = '';\n\n    if (this.config) {\n      let {\n        data\n      } = this.config;\n\n      try {\n        data = JSON.parse(data);\n      } catch (_) {} // eslint-disable-line\n\n\n      let requestData = '';\n\n      if (this.config.data) {\n        requestData = `\nRequest Data -\n${indent(json(data))}`;\n      }\n\n      requestMessage = `\nRequest -\n  ${this.config.method ? this.config.method.toUpperCase() : ''} ${this.config.url}\n${requestData}`;\n    }\n\n    let responseMessage = '';\n\n    if (this.response) {\n      let responseData;\n\n      if (this.response.data) {\n        responseData = `\nResponse Data -\n${indent(json(this.response.data))}`;\n      }\n\n      responseMessage = `\nResponse -\n  ${this.response.status} ${this.response.statusText}\n${responseData}`;\n    }\n\n    return `\n${this.stack}\n\nError Message -\n  ${this.message}\n${requestMessage}\n${responseMessage}\n`;\n  }\n\n}\n\nmodule.exports = AxiosError;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAKA,SAAS,MAAT,CAAgB,GAAhB,EAA2B;AACzB,SAAO,GAAG,CACP,KADI,CACE,IADF,EAEJ,GAFI,CAEC,CAAD,IAAQ,CAAC,GAAG,KAAK,CAAC,EAAT,GAAc,EAFvB,EAGJ,IAHI,CAGC,IAHD,CAAP;AAID;;AAED,SAAS,IAAT,CAAc,IAAd,EAA6B;AAC3B,SAAO,IAAI,CAAC,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AAED,MAAM,UAAN,SAAyB,KAAzB,CAA8B;AAoC5B,EAAA,WAAA,CACE,cADF,EAEE,KAFF,EAI6D;AAE3D,QAAI,GAAJ;;AACA,QAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AACtC,YAAM,cAAN;AACA,MAAA,GAAG,GAAG,KAAN;AACD,KAHD,MAGO;AACL,YAAM,cAAc,CAAC,OAArB;AACA,MAAA,GAAG,GAAG,cAAN;AACD;;AAED,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA,OAAV;AAAmB,MAAA;AAAnB,QAAgC,GAAtC;AAEA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,MAAzB,EAAiC;AAC/B,WAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACD;;AAED,SAAK,IAAL,GAAY,YAAZ;AACD;;AAEmB,GAAnB,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,MAAM,IAAC;AACnB,QAAI,cAAc,GAAG,EAArB;;AAEA,QAAI,KAAK,MAAT,EAAiB;AACf,UAAI;AAAE,QAAA;AAAF,UAAW,KAAK,MAApB;;AAEA,UAAI;AACF,QAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;AACD,OAFD,CAEE,OAAO,CAAP,EAAU,CAAE,CALC,CAKA;;;AAEf,UAAI,WAAW,GAAG,EAAlB;;AAEA,UAAI,KAAK,MAAL,CAAY,IAAhB,EAAsB;AACpB,QAAA,WAAW,GAAG;;EAEpB,MAAM,CAAC,IAAI,CAAC,IAAD,CAAL,CAAY,EAFZ;AAGD;;AAED,MAAA,cAAc,GAAG;;IAEnB,KAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,MAAL,CAAY,MAAZ,CAAmB,WAAnB,EAArB,GAAwD,EAAE,IACtD,KAAK,MAAL,CAAY,GACd;EACJ,WAAW,EALP;AAMD;;AAED,QAAI,eAAe,GAAG,EAAtB;;AAEA,QAAI,KAAK,QAAT,EAAmB;AACjB,UAAI,YAAJ;;AAEA,UAAI,KAAK,QAAL,CAAc,IAAlB,EAAwB;AACtB,QAAA,YAAY,GAAG;;EAErB,MAAM,CAAC,IAAI,CAAC,KAAK,QAAL,CAAc,IAAf,CAAL,CAA0B,EAF1B;AAGD;;AAED,MAAA,eAAe,GAAG;;IAEpB,KAAK,QAAL,CAAc,MAAM,IAAI,KAAK,QAAL,CAAc,UAAU;EAClD,YAAY,EAHR;AAID;;AAED,WAAO;EACT,KAAK,KAAK;;;IAGR,KAAK,OAAO;EACd,cAAc;EACd,eAAe;AAChB,CAPG;AAQD;;AAlH2B;;AAqH9B,MAAA,CAAA,OAAA,GAAS,UAAT","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst util_1 = __importDefault(require(\"util\"));\nfunction indent(str) {\n    return str\n        .split('\\n')\n        .map((s) => (s ? `  ${s}` : ''))\n        .join('\\n');\n}\nfunction json(data) {\n    return JSON.stringify(data, null, 2);\n}\nclass AxiosError extends Error {\n    constructor(messageOrError, error) {\n        let err;\n        if (typeof messageOrError === 'string') {\n            super(messageOrError);\n            err = error;\n        }\n        else {\n            super(messageOrError.message);\n            err = messageOrError;\n        }\n        const { config, request, response } = err;\n        this.config = config;\n        this.request = request;\n        this.response = response;\n        if (response && response.status) {\n            this.status = response.status;\n        }\n        this.name = 'AxiosError';\n    }\n    [util_1.default.inspect.custom]() {\n        let requestMessage = '';\n        if (this.config) {\n            let { data } = this.config;\n            try {\n                data = JSON.parse(data);\n            }\n            catch (_) { } // eslint-disable-line\n            let requestData = '';\n            if (this.config.data) {\n                requestData = `\nRequest Data -\n${indent(json(data))}`;\n            }\n            requestMessage = `\nRequest -\n  ${this.config.method ? this.config.method.toUpperCase() : ''} ${this.config.url}\n${requestData}`;\n        }\n        let responseMessage = '';\n        if (this.response) {\n            let responseData;\n            if (this.response.data) {\n                responseData = `\nResponse Data -\n${indent(json(this.response.data))}`;\n            }\n            responseMessage = `\nResponse -\n  ${this.response.status} ${this.response.statusText}\n${responseData}`;\n        }\n        return `\n${this.stack}\n\nError Message -\n  ${this.message}\n${requestMessage}\n${responseMessage}\n`;\n    }\n}\nmodule.exports = AxiosError;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}