{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pascalcaseKeysDeep = exports.pascalcaseKeys = exports.pascalcase = exports.camelcaseKeysDeep = exports.camelcaseKeys = exports.camelcase = exports.snakecaseKeysDeep = exports.snakecaseKeys = exports.snakecase = void 0;\n\nconst map_obj_1 = __importDefault(require(\"map-obj\"));\n\nconst camel_case_1 = require(\"camel-case\");\n\nconst pascal_case_1 = require(\"pascal-case\");\n\nconst snake_case_1 = require(\"snake-case\");\n\nfunction isLastCharNumber(key) {\n  return /^\\d$/.test(key[key.length - 1]);\n}\n\nfunction splitLastChar(key) {\n  return `${key.slice(0, key.length - 1)}_${key.slice(key.length - 1, key.length)}`;\n}\n/**\n * Converts a string to snake case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * snakecase('fooBar');\n * //=> 'foo_bar'\n * ```\n */\n\n\nfunction snakecase(text) {\n  const matches = text.match(/\\d+/g);\n\n  if (!matches) {\n    return snake_case_1.snakeCase(text);\n  }\n\n  let modifiedStr = text;\n\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const mathIndex = modifiedStr.indexOf(match);\n    modifiedStr = `${modifiedStr.slice(0, mathIndex)}_${modifiedStr.slice(mathIndex, modifiedStr.length)}`;\n  }\n\n  return snake_case_1.snakeCase(modifiedStr);\n}\n\nexports.snakecase = snakecase;\n/**\n * Converts object keys to snake case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * snakecaseKeys({ 'fooBar': true });\n * //=> { 'foo_bar': true }\n * ```\n */\n\nfunction snakecaseKeys(obj, options = {}) {\n  return map_obj_1.default(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (key, val) => [snakecase(key), val], options);\n}\n\nexports.snakecaseKeys = snakecaseKeys;\n/**\n * Converts object keys to snake case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * snakecaseKeysDeep({ 'fooBar': { 'barFoo': true } });\n * //=> { 'foo_bar': { 'bar_foo': true } }\n * ```\n */\n\nfunction snakecaseKeysDeep(obj) {\n  return snakecaseKeys(obj, {\n    deep: true\n  });\n}\n\nexports.snakecaseKeysDeep = snakecaseKeysDeep;\n/**\n * Converts a string to camel case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * camelcase('foo_bar');\n * //=> 'fooBar'\n * ```\n */\n\nfunction camelcase(text) {\n  const parts = text.split('_');\n  const modifiedStr = parts.reduce((acc, part) => {\n    if (acc === '') return part;\n\n    if (/^\\d+/.test(part)) {\n      return acc + part;\n    }\n\n    return `${acc}_${part}`;\n  }, '');\n  return camel_case_1.camelCase(modifiedStr);\n}\n\nexports.camelcase = camelcase;\n/**\n * Converts object keys to camel case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * camelcaseKeys({ 'foo_bar': true });\n * //=> { 'fooBar': true }\n * ```\n */\n\nfunction camelcaseKeys(obj, options = {}) {\n  return map_obj_1.default(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (key, val) => [camelcase(key), val], options);\n}\n\nexports.camelcaseKeys = camelcaseKeys;\n/**\n * Converts object keys to camel case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * camelcaseKeysDeep({ 'foo_bar': { 'bar_foo': true } });\n * //=> { 'fooBar': { 'barFoo': true } }\n * ```\n */\n\nfunction camelcaseKeysDeep(obj) {\n  return camelcaseKeys(obj, {\n    deep: true\n  });\n}\n\nexports.camelcaseKeysDeep = camelcaseKeysDeep;\n/**\n * Converts a string to pascal case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * pascalcase('fooBar');\n * //=> 'FooBar'\n * ```\n */\n\nfunction pascalcase(str) {\n  return pascal_case_1.pascalCase(isLastCharNumber(str) ? splitLastChar(str) : str);\n}\n\nexports.pascalcase = pascalcase;\n/**\n * Converts object keys to pascal case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * pascalcaseKeys({ 'fooBar': true });\n * //=> { 'FooBar': true }\n * ```\n */\n\nfunction pascalcaseKeys(obj, options = {}) {\n  return map_obj_1.default(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (key, val) => [pascalcase(key), val], options);\n}\n\nexports.pascalcaseKeys = pascalcaseKeys;\n/**\n * Converts object keys to pascal case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * pascalcaseKeysDeep({ 'fooBar': { 'barFoo': true } });\n * //=> { 'FooBar': { 'BarFoo': true } }\n * ```\n */\n\nfunction pascalcaseKeysDeep(obj) {\n  return pascalcaseKeys(obj, {\n    deep: true\n  });\n}\n\nexports.pascalcaseKeysDeep = pascalcaseKeysDeep;","map":{"version":3,"sources":["../src/case.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAMA,SAAS,gBAAT,CAA0B,GAA1B,EAAqC;AACnC,SAAO,OAAO,IAAP,CAAY,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAf,CAAP;AACD;;AAED,SAAS,aAAT,CAAuB,GAAvB,EAAkC;AAChC,SAAO,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,GAAG,CAAC,MAAJ,GAAa,CAA1B,CAA4B,IAAI,GAAG,CAAC,KAAJ,CACxC,GAAG,CAAC,MAAJ,GAAa,CAD2B,EAExC,GAAG,CAAC,MAFoC,CAGzC,EAHD;AAID;AAED;;;;;;;;;;;AAWG;;;AACH,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,CAAhB;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,YAAA,CAAA,SAAA,CAAU,IAAV,CAAP;AACD;;AAED,MAAI,WAAW,GAAG,IAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,UAAM,KAAK,GAAG,OAAO,CAAC,CAAD,CAArB;AACA,UAAM,SAAS,GAAG,WAAW,CAAC,OAAZ,CAAoB,KAApB,CAAlB;AACA,IAAA,WAAW,GAAG,GAAG,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,SAArB,CAA+B,IAAI,WAAW,CAAC,KAAZ,CAClD,SADkD,EAElD,WAAW,CAAC,MAFsC,CAGnD,EAHD;AAID;;AAED,SAAO,YAAA,CAAA,SAAA,CAAU,WAAV,CAAP;AACD;;AA6JC,OAAA,CAAA,SAAA,GAAA,SAAA;AA3JF;;;;;;;;;;;;AAYG;;AACH,SAAS,aAAT,CAAuB,GAAvB,EAAyC,OAAA,GAAmB,EAA5D,EAA8D;AAC5D,SAAO,SAAA,CAAA,OAAA,CACL,GADK,EAEL;AACA,GAAC,GAAD,EAAc,GAAd,KAA2B,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,GAAjB,CAHtB,EAIL,OAJK,CAAP;AAMD;;AAwIC,OAAA,CAAA,aAAA,GAAA,aAAA;AAtIF;;;;;;;;;;;AAWG;;AACH,SAAS,iBAAT,CAA2B,GAA3B,EAA2C;AACzC,SAAO,aAAa,CAAC,GAAD,EAAM;AAAE,IAAA,IAAI,EAAE;AAAR,GAAN,CAApB;AACD;;AAyHC,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAvHF;;;;;;;;;;;AAWG;;AACH,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;AACA,QAAM,WAAW,GAAG,KAAK,CAAC,MAAN,CAAa,CAAC,GAAD,EAAM,IAAN,KAAc;AAC7C,QAAI,GAAG,KAAK,EAAZ,EAAgB,OAAO,IAAP;;AAChB,QAAI,OAAO,IAAP,CAAY,IAAZ,CAAJ,EAAuB;AACrB,aAAO,GAAG,GAAG,IAAb;AACD;;AACD,WAAO,GAAG,GAAG,IAAI,IAAI,EAArB;AACD,GANmB,EAMjB,EANiB,CAApB;AAOA,SAAO,YAAA,CAAA,SAAA,CAAU,WAAV,CAAP;AACD;;AAkGC,OAAA,CAAA,SAAA,GAAA,SAAA;AAhGF;;;;;;;;;;;;AAYG;;AACH,SAAS,aAAT,CAAuB,GAAvB,EAAyC,OAAA,GAAmB,EAA5D,EAA8D;AAC5D,SAAO,SAAA,CAAA,OAAA,CACL,GADK,EAEL;AACA,GAAC,GAAD,EAAc,GAAd,KAA2B,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,GAAjB,CAHtB,EAIL,OAJK,CAAP;AAMD;;AA6EC,OAAA,CAAA,aAAA,GAAA,aAAA;AA3EF;;;;;;;;;;;AAWG;;AACH,SAAS,iBAAT,CAA2B,GAA3B,EAA2C;AACzC,SAAO,aAAa,CAAC,GAAD,EAAM;AAAE,IAAA,IAAI,EAAE;AAAR,GAAN,CAApB;AACD;;AA8DC,OAAA,CAAA,iBAAA,GAAA,iBAAA;AA5DF;;;;;;;;;;;AAWG;;AACH,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC7B,SAAO,aAAA,CAAA,UAAA,CAAW,gBAAgB,CAAC,GAAD,CAAhB,GAAwB,aAAa,CAAC,GAAD,CAArC,GAA6C,GAAxD,CAAP;AACD;;AA+CC,OAAA,CAAA,UAAA,GAAA,UAAA;AA7CF;;;;;;;;;;;;AAYG;;AACH,SAAS,cAAT,CAAwB,GAAxB,EAA0C,OAAA,GAAmB,EAA7D,EAA+D;AAC7D,SAAO,SAAA,CAAA,OAAA,CACL,GADK,EAEL;AACA,GAAC,GAAD,EAAc,GAAd,KAA2B,CAAC,UAAU,CAAC,GAAD,CAAX,EAAkB,GAAlB,CAHtB,EAIL,OAJK,CAAP;AAMD;;AA0BC,OAAA,CAAA,cAAA,GAAA,cAAA;AAxBF;;;;;;;;;;;AAWG;;AACH,SAAS,kBAAT,CAA4B,GAA5B,EAA4C;AAC1C,SAAO,cAAc,CAAC,GAAD,EAAM;AAAE,IAAA,IAAI,EAAE;AAAR,GAAN,CAArB;AACD;;AAWC,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pascalcaseKeysDeep = exports.pascalcaseKeys = exports.pascalcase = exports.camelcaseKeysDeep = exports.camelcaseKeys = exports.camelcase = exports.snakecaseKeysDeep = exports.snakecaseKeys = exports.snakecase = void 0;\nconst map_obj_1 = __importDefault(require(\"map-obj\"));\nconst camel_case_1 = require(\"camel-case\");\nconst pascal_case_1 = require(\"pascal-case\");\nconst snake_case_1 = require(\"snake-case\");\nfunction isLastCharNumber(key) {\n    return /^\\d$/.test(key[key.length - 1]);\n}\nfunction splitLastChar(key) {\n    return `${key.slice(0, key.length - 1)}_${key.slice(key.length - 1, key.length)}`;\n}\n/**\n * Converts a string to snake case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * snakecase('fooBar');\n * //=> 'foo_bar'\n * ```\n */\nfunction snakecase(text) {\n    const matches = text.match(/\\d+/g);\n    if (!matches) {\n        return snake_case_1.snakeCase(text);\n    }\n    let modifiedStr = text;\n    for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        const mathIndex = modifiedStr.indexOf(match);\n        modifiedStr = `${modifiedStr.slice(0, mathIndex)}_${modifiedStr.slice(mathIndex, modifiedStr.length)}`;\n    }\n    return snake_case_1.snakeCase(modifiedStr);\n}\nexports.snakecase = snakecase;\n/**\n * Converts object keys to snake case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * snakecaseKeys({ 'fooBar': true });\n * //=> { 'foo_bar': true }\n * ```\n */\nfunction snakecaseKeys(obj, options = {}) {\n    return map_obj_1.default(obj, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key, val) => [snakecase(key), val], options);\n}\nexports.snakecaseKeys = snakecaseKeys;\n/**\n * Converts object keys to snake case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * snakecaseKeysDeep({ 'fooBar': { 'barFoo': true } });\n * //=> { 'foo_bar': { 'bar_foo': true } }\n * ```\n */\nfunction snakecaseKeysDeep(obj) {\n    return snakecaseKeys(obj, { deep: true });\n}\nexports.snakecaseKeysDeep = snakecaseKeysDeep;\n/**\n * Converts a string to camel case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * camelcase('foo_bar');\n * //=> 'fooBar'\n * ```\n */\nfunction camelcase(text) {\n    const parts = text.split('_');\n    const modifiedStr = parts.reduce((acc, part) => {\n        if (acc === '')\n            return part;\n        if (/^\\d+/.test(part)) {\n            return acc + part;\n        }\n        return `${acc}_${part}`;\n    }, '');\n    return camel_case_1.camelCase(modifiedStr);\n}\nexports.camelcase = camelcase;\n/**\n * Converts object keys to camel case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * camelcaseKeys({ 'foo_bar': true });\n * //=> { 'fooBar': true }\n * ```\n */\nfunction camelcaseKeys(obj, options = {}) {\n    return map_obj_1.default(obj, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key, val) => [camelcase(key), val], options);\n}\nexports.camelcaseKeys = camelcaseKeys;\n/**\n * Converts object keys to camel case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * camelcaseKeysDeep({ 'foo_bar': { 'bar_foo': true } });\n * //=> { 'fooBar': { 'barFoo': true } }\n * ```\n */\nfunction camelcaseKeysDeep(obj) {\n    return camelcaseKeys(obj, { deep: true });\n}\nexports.camelcaseKeysDeep = camelcaseKeysDeep;\n/**\n * Converts a string to pascal case.\n *\n * @param text - The input string\n * @returns The converted string\n *\n * @example\n * ```js\n * pascalcase('fooBar');\n * //=> 'FooBar'\n * ```\n */\nfunction pascalcase(str) {\n    return pascal_case_1.pascalCase(isLastCharNumber(str) ? splitLastChar(str) : str);\n}\nexports.pascalcase = pascalcase;\n/**\n * Converts object keys to pascal case.\n *\n * @param obj - The input object\n * @param options - The options to config this convert function\n * @returns The converted object\n *\n * @example\n * ```js\n * pascalcaseKeys({ 'fooBar': true });\n * //=> { 'FooBar': true }\n * ```\n */\nfunction pascalcaseKeys(obj, options = {}) {\n    return map_obj_1.default(obj, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key, val) => [pascalcase(key), val], options);\n}\nexports.pascalcaseKeys = pascalcaseKeys;\n/**\n * Converts object keys to pascal case deeply.\n *\n * @param obj - The input object\n * @returns The converted object\n *\n * @example\n * ```js\n * pascalcaseKeysDeep({ 'fooBar': { 'barFoo': true } });\n * //=> { 'FooBar': { 'BarFoo': true } }\n * ```\n */\nfunction pascalcaseKeysDeep(obj) {\n    return pascalcaseKeys(obj, { deep: true });\n}\nexports.pascalcaseKeysDeep = pascalcaseKeysDeep;\n//# sourceMappingURL=case.js.map"]},"metadata":{},"sourceType":"script"}